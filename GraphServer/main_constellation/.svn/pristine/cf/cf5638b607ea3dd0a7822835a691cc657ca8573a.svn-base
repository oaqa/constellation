package edu.cmu.lti.oaqa.graph.constellation;

// The JSON-RPC 2.0 Base classes that define the 
// JSON-RPC 2.0 protocol messages
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.minidev.json.JSONArray;
import net.minidev.json.JSONObject;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Error;
import com.thetransactioncompany.jsonrpc2.JSONRPC2ParseException;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Request;
import com.thetransactioncompany.jsonrpc2.JSONRPC2Response;
import com.thetransactioncompany.jsonrpc2.server.Dispatcher;
import com.thetransactioncompany.jsonrpc2.server.MessageContext;
import com.thetransactioncompany.jsonrpc2.server.RequestHandler;
import com.tinkerpop.blueprints.Direction;
import com.tinkerpop.blueprints.Edge;
import com.tinkerpop.blueprints.Vertex;
import com.tinkerpop.blueprints.impls.rexster.RexsterGraph;

import edu.cmu.lti.GraphQA.DemoGraph.Traverser;
// The JSON-RPC 2.0 server framework package


public class JsonServer {

    public static class DemoGraphHandler implements RequestHandler {
	
    	private RexsterGraph graph = new RexsterGraph("http://peace.isri.cs.cmu.edu:8182/graphs/DemoGraph");

        // Reports the method names of the handled requests
	public String[] handledRequests() {
	
	    return new String[]{"parse"};
	}
	
	
	// Processes the requests
	public JSONRPC2Response process(JSONRPC2Request req, MessageContext ctx) {
	
	    if (req.getMethod().equals("parse")) {
	    				
		//parse query

		JSONArray list = (JSONArray) req.toJSON().get("params");
		
		JSONObject params = (JSONObject) list.get(0);
		
		boolean isPlural=params.get("plural").equals("true");
		BigInteger uuid = (BigInteger) params.get("uuid");
		Long qid = (Long) params.get("qid");
		System.out.println(isPlural);
		System.out.println(uuid);
		System.out.println(qid);
		
		JSONArray query = (JSONArray) params.get("query");
		
		JSONArray entity = (JSONArray) query.get(0);
		JSONArray traverse = (JSONArray) query.get(1);
		JSONArray entityProperty = (JSONArray) query.get(2);
		
		System.out.println(entity);
		System.out.println(traverse);
		System.out.println(entityProperty);
		
		String entityString = (String) entity.get((entity.indexOf("Text")+1));
		String traverseString = (String) traverse.get((traverse.indexOf("Traverse")+1));
		String entityPropertyString = (String) entityProperty.get((entityProperty.indexOf("Type")+1));
		
		if(entityString!=null) entityString=entityString.toLowerCase().replaceAll(" ", "_");
		if(traverseString!=null) traverseString=traverseString.toLowerCase();
		if(entityPropertyString!=null) entityPropertyString=entityPropertyString.toLowerCase();
		
		Iterator<Object> queryItty = query.iterator();
		while(queryItty.hasNext()){
			Object key = queryItty.next();
			System.out.println("key: "+key);
		}
		
		System.out.println(entityString);
		System.out.println(traverseString);
		System.out.println(entityPropertyString);

		//do graph lookup
		Vertex vertex = findVertex(graph,entityString);
		String propertyResult = getProperty(vertex, entityPropertyString);
		
		System.out.println(propertyResult);
		
		//{"uuid":x, "plainText":"jackm321@cmu.edu", "plural":false, "qid":0, "context":{"object":{"type":"person","position":"student","email":"jackm321@cmu.edu"}}, "type":"answer"  }
		
		HashMap map = new HashMap<String,Object>();
		map.put("uuid", uuid);
		map.put("plainText",propertyResult);
		map.put("plural", isPlural);
		map.put("qid", qid);
		map.put("type", "answer");
		map.put("context", new HashMap<String,Object>());
		
		
		//get the object's map from rexster and send that back
		//get the actual answer and send that back
		//get constants from the request and pass those back
		
		//return new JSONRPC2Response(propertyResult, req.getID());
		return new JSONRPC2Response(map, req.getID());
	    }
	    
	    else {
	    
	        // Method name not supported
		
		return new JSONRPC2Response(JSONRPC2Error.METHOD_NOT_FOUND, req.getID());
            }
        }
    }
    
    
    public String runJsonQuery(String inputJson){
	    // Create a new JSON-RPC 2.0 request dispatcher
		Dispatcher dispatcher =  new Dispatcher();
		dispatcher.register(new DemoGraphHandler());
		
		JSONRPC2Request req = null;
		JSONRPC2Response resp = null;

		try{
			req = JSONRPC2Request.parse(inputJson);
			}
	    catch (JSONRPC2ParseException e) {
	        // handle exception
	    	e.printStackTrace();
	    	throw new Error();
	    	}
	 
		//System.out.println("Request: \n" + req);
		
		resp = dispatcher.dispatch(req, null);
		//System.out.println("Response: \n" + resp);
		
		return resp.toString();
    }
    
    /*public static void main(String[] args) {
	
        // Create a new JSON-RPC 2.0 request dispatcher
	Dispatcher dispatcher =  new Dispatcher();
	
	
	// Register the handlers with it
	dispatcher.register(new DemoGraphHandler());
	
	//simulate graphQuery
	String jsonString = "{\"jsonrpc\": \"2.0\", \"method\": \"parse\", \"params\": [\"{\\\"plural\\\": false, \\\"uuid\\\": 135579527904736286024158236999354009512, \\\"plainText\\\": \\\"What is nyberg's email?\\\", \\\"qid\\\": 0, \\\"context\\\": {}, \\\"query\\\": [[\\\"text\\\", \\\"nyberg\\\"], [\\\"type\\\", \\\"professor\\\"], [\\\"traverse\\\", \\\"\\\"], [\\\"type\\\", \\\"email\\\"]], \\\"type\\\": \\\"question\\\"}\"], \"id\": 0}\n" + 
			"";
	JSONRPC2Request req = null;
	try{
		req = JSONRPC2Request.parse(jsonString);
		}
    catch (JSONRPC2ParseException e) {
        // handle exception
    	e.printStackTrace();
    	throw new Error();
    	}
 
	System.out.println("Request: \n" + req);
	
	JSONRPC2Response resp = dispatcher.dispatch(req, null);
	System.out.println("Response: \n" + resp);
    }*/
    
    public List<Vertex> findVertices(RexsterGraph graph, String searchPhrase){
    	return Traverser.search(graph, searchPhrase);
    }
    
    public static Vertex findVertex(RexsterGraph graph, String searchPhrase){
    	List<Vertex> results = Traverser.search(graph, searchPhrase);
    	if(results.size()>0) return results.get(0);
    	else return null;
    }
    
    public static String getProperty(Vertex vertex, String key){
    	if(vertex==null) return null;
    	try{
    	return (String) vertex.getProperty(key);
    	}
    	catch(Exception e){
    		e.printStackTrace();
    		throw new Error();
    	}
    }
    
    public Iterable<Vertex> doTraverse(Vertex vertex, String value){
    	Iterable<Vertex> queryResults = vertex.query().direction(Direction.OUT).vertices();
    	List<Vertex> returnList = Lists.newArrayList();
    	for(Vertex v:queryResults){
    		for(String key:v.getPropertyKeys()){
    			String property = v.getProperty(key).toString();
    			if(property.equals(value)) returnList.add(v);
    		}
    	}
    	return returnList;
    }
    
    public Map<String,String> constructVertexAsMap(Vertex v){
    	Map<String,String> map = Maps.newHashMap();
    	for(String key:v.getPropertyKeys()){
    		String value = v.getProperty(key).toString();
    		map.put(key, value);
    	}
    	for(Edge edge: v.query().edges()){
    		String key = edge.getId().toString();
    		String value = edge.toString();
    		map.put(key, value);
    	}
    	return map;
    }
    
}